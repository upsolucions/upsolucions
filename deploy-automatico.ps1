# Script PowerShell para Deploy Autom√°tico - Up Solu√ß√µes
# Executa: powershell -ExecutionPolicy Bypass -File deploy-automatico.ps1

Write-Host "üöÄ CONFIGURANDO DEPLOY AUTOM√ÅTICO - UP SOLU√á√ïES" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host ""

# Fun√ß√£o para verificar se um comando existe
function Test-Command {
    param($Command)
    try {
        Get-Command $Command -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# Fun√ß√£o para executar comando com verifica√ß√£o
function Invoke-SafeCommand {
    param(
        [string]$Command,
        [string]$Description,
        [bool]$ContinueOnError = $false
    )
    
    Write-Host "üîÑ $Description..." -ForegroundColor Yellow
    
    try {
        Invoke-Expression $Command
        Write-Host "‚úÖ $Description conclu√≠do" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Erro em $Description`: $($_.Exception.Message)" -ForegroundColor Red
        if (-not $ContinueOnError) {
            Write-Host "‚ö†Ô∏è  Parando execu√ß√£o devido ao erro" -ForegroundColor Yellow
            exit 1
        }
        return $false
    }
}

# 1. Verificar Node.js
Write-Host "1Ô∏è‚É£ VERIFICANDO PR√â-REQUISITOS" -ForegroundColor Magenta
Write-Host ""

if (Test-Command "node") {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Node.js n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Instale Node.js 18+ em: https://nodejs.org" -ForegroundColor Yellow
    exit 1
}

# 2. Verificar Git
if (Test-Command "git") {
    $gitVersion = git --version
    Write-Host "‚úÖ Git encontrado: $gitVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Git n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Instale Git em: https://git-scm.com" -ForegroundColor Yellow
    exit 1
}

# 3. Verificar se est√° em um reposit√≥rio Git
Write-Host ""
Write-Host "2Ô∏è‚É£ CONFIGURANDO REPOSIT√ìRIO GIT" -ForegroundColor Magenta
Write-Host ""

try {
    git status | Out-Null
    Write-Host "‚úÖ Reposit√≥rio Git encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Reposit√≥rio Git n√£o encontrado, inicializando..." -ForegroundColor Yellow
    
    Invoke-SafeCommand "git init" "Inicializando reposit√≥rio Git"
    Invoke-SafeCommand "git add ." "Adicionando arquivos ao Git"
    Invoke-SafeCommand 'git commit -m "Initial commit: Setup projeto Up Solu√ß√µes"' "Fazendo commit inicial"
}

# 4. Verificar/Instalar Vercel CLI
Write-Host ""
Write-Host "3Ô∏è‚É£ CONFIGURANDO VERCEL CLI" -ForegroundColor Magenta
Write-Host ""

if (Test-Command "vercel") {
    $vercelVersion = vercel --version
    Write-Host "‚úÖ Vercel CLI encontrado: $vercelVersion" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Vercel CLI n√£o encontrado, instalando..." -ForegroundColor Yellow
    Invoke-SafeCommand "npm install -g vercel" "Instalando Vercel CLI"
}

# 5. Verificar depend√™ncias do projeto
Write-Host ""
Write-Host "4Ô∏è‚É£ VERIFICANDO DEPEND√äNCIAS" -ForegroundColor Magenta
Write-Host ""

if (Test-Path "package.json") {
    Write-Host "‚úÖ package.json encontrado" -ForegroundColor Green
    
    if (Test-Path "node_modules") {
        Write-Host "‚úÖ node_modules encontrado" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  node_modules n√£o encontrado, instalando depend√™ncias..." -ForegroundColor Yellow
        Invoke-SafeCommand "npm install" "Instalando depend√™ncias"
    }
} else {
    Write-Host "‚ùå package.json n√£o encontrado!" -ForegroundColor Red
    exit 1
}

# 6. Testar build do projeto
Write-Host ""
Write-Host "5Ô∏è‚É£ TESTANDO BUILD DO PROJETO" -ForegroundColor Magenta
Write-Host ""

$buildSuccess = Invoke-SafeCommand "npm run build" "Testando build do projeto" $true

if ($buildSuccess) {
    Write-Host "‚úÖ Build funcionando corretamente" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Build falhou, mas continuando..." -ForegroundColor Yellow
    Write-Host "üí° Verifique os erros acima e corrija antes do deploy" -ForegroundColor Yellow
}

# 7. Verificar arquivos de configura√ß√£o
Write-Host ""
Write-Host "6Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES" -ForegroundColor Magenta
Write-Host ""

$configFiles = @(
    @{Path = ".env.local"; Description = "Vari√°veis de ambiente"},
    @{Path = "vercel.json"; Description = "Configura√ß√£o do Vercel"},
    @{Path = ".github/workflows/deploy.yml"; Description = "GitHub Actions"},
    @{Path = ".gitignore"; Description = "Git ignore"}
)

foreach ($config in $configFiles) {
    if (Test-Path $config.Path) {
        Write-Host "‚úÖ $($config.Description) configurado" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  $($config.Description) n√£o encontrado" -ForegroundColor Yellow
    }
}

# 8. Mostrar pr√≥ximos passos
Write-Host ""
Write-Host "üéâ CONFIGURA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host ""

Write-Host "üìã PR√ìXIMOS PASSOS MANUAIS:" -ForegroundColor Cyan
Write-Host ""

Write-Host "1. üìÅ CRIAR REPOSIT√ìRIO NO GITHUB:" -ForegroundColor White
Write-Host "   ‚Ä¢ Acesse: https://github.com/new" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Nome sugerido: up-solucoes-site" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Escolha p√∫blico ou privado" -ForegroundColor Gray
Write-Host ""

Write-Host "2. üîó CONECTAR REPOSIT√ìRIO LOCAL:" -ForegroundColor White
Write-Host "   git remote add origin https://github.com/SEU_USUARIO/up-solucoes-site.git" -ForegroundColor Gray
Write-Host "   git branch -M main" -ForegroundColor Gray
Write-Host "   git push -u origin main" -ForegroundColor Gray
Write-Host ""

Write-Host "3. üöÄ CONFIGURAR VERCEL:" -ForegroundColor White
Write-Host "   vercel login" -ForegroundColor Gray
Write-Host "   vercel link" -ForegroundColor Gray
Write-Host "   vercel --prod" -ForegroundColor Gray
Write-Host ""

Write-Host "4. üîê CONFIGURAR SECRETS NO GITHUB:" -ForegroundColor White
Write-Host "   ‚Ä¢ V√° para: Repository ‚Üí Settings ‚Üí Secrets ‚Üí Actions" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Adicione os secrets listados no DEPLOY-GUIDE.md" -ForegroundColor Gray
Write-Host ""

Write-Host "5. ‚úÖ TESTAR DEPLOY:" -ForegroundColor White
Write-Host "   ‚Ä¢ Fa√ßa um commit e push" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Verifique GitHub Actions" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Acesse o site no Vercel" -ForegroundColor Gray
Write-Host ""

Write-Host "üìñ DOCUMENTA√á√ÉO COMPLETA:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ DEPLOY-GUIDE.md - Guia completo de deploy" -ForegroundColor Gray
Write-Host "   ‚Ä¢ GUIA-OTIMIZACAO.md - Otimiza√ß√µes de performance" -ForegroundColor Gray
Write-Host ""

Write-Host "üåê COMANDOS √öTEIS:" -ForegroundColor Cyan
Write-Host "   npm run dev:fast        # Desenvolvimento r√°pido" -ForegroundColor Gray
Write-Host "   npm run build           # Testar build" -ForegroundColor Gray
Write-Host "   npm run deploy:preview  # Deploy de teste" -ForegroundColor Gray
Write-Host "   npm run deploy:prod     # Deploy produ√ß√£o" -ForegroundColor Gray
Write-Host "   npm run check:deploy    # Verificar deploys" -ForegroundColor Gray
Write-Host ""

Write-Host "üéØ SITE LOCAL FUNCIONANDO:" -ForegroundColor Green
Write-Host "   http://localhost:3000" -ForegroundColor White
Write-Host ""

# 9. Perguntar se quer executar comandos automaticamente
Write-Host "‚ùì EXECUTAR COMANDOS AUTOMATICAMENTE?" -ForegroundColor Yellow
Write-Host ""

$response = Read-Host "Deseja que eu execute os comandos do Vercel automaticamente? (s/n)"

if ($response -eq "s" -or $response -eq "S" -or $response -eq "sim") {
    Write-Host ""
    Write-Host "üöÄ EXECUTANDO COMANDOS DO VERCEL..." -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "üìù Fazendo login no Vercel..." -ForegroundColor Yellow
    Write-Host "üí° Uma p√°gina do navegador ser√° aberta para login" -ForegroundColor Gray
    
    try {
        vercel login
        Write-Host "‚úÖ Login no Vercel conclu√≠do" -ForegroundColor Green
        
        Write-Host ""
        Write-Host "üîó Conectando projeto ao Vercel..." -ForegroundColor Yellow
        vercel link
        Write-Host "‚úÖ Projeto conectado ao Vercel" -ForegroundColor Green
        
        Write-Host ""
        Write-Host "üöÄ Fazendo deploy inicial..." -ForegroundColor Yellow
        vercel --prod
        Write-Host "‚úÖ Deploy inicial conclu√≠do" -ForegroundColor Green
        
        Write-Host ""
        Write-Host "üéâ DEPLOY AUTOM√ÅTICO CONFIGURADO COM SUCESSO!" -ForegroundColor Green
        Write-Host "üì± Seu site est√° online no Vercel!" -ForegroundColor White
        
    } catch {
        Write-Host "‚ùå Erro durante configura√ß√£o autom√°tica: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "üí° Execute os comandos manualmente conforme instru√ß√µes acima" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚úÖ Execute os comandos manualmente quando estiver pronto" -ForegroundColor Green
}

Write-Host ""
Write-Host "üéØ CONFIGURA√á√ÉO DE DEPLOY FINALIZADA!" -ForegroundColor Green
Write-Host "üìñ Consulte DEPLOY-GUIDE.md para instru√ß√µes detalhadas" -ForegroundColor White
Write-Host ""

# Pausar para o usu√°rio ler
Write-Host "Pressione qualquer tecla para continuar..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")