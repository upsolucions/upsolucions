#!/usr/bin/env node

/**
 * Script para otimizar performance do Next.js
 * Resolve problemas de lentid√£o e tempos de resposta altos
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

console.log('üöÄ Iniciando otimiza√ß√£o de performance...')

// 1. Limpar todos os caches
function clearAllCaches() {
  console.log('üßπ Limpando todos os caches...')
  
  const cacheDirs = [
    '.next',
    'node_modules/.cache',
    '.next/cache',
    '.next/static',
    '.next/server',
    'out'
  ]
  
  cacheDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      try {
        fs.rmSync(dir, { recursive: true, force: true })
        console.log(`‚úÖ Cache removido: ${dir}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel remover: ${dir}`)
      }
    }
  })
}

// 2. Otimizar package.json
function optimizePackageJson() {
  console.log('üì¶ Otimizando package.json...')
  
  const packagePath = 'package.json'
  if (fs.existsSync(packagePath)) {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'))
    
    // Adicionar scripts de otimiza√ß√£o
    packageJson.scripts = {
      ...packageJson.scripts,
      'dev:fast': 'next dev --turbo',
      'dev:debug': 'next dev --debug',
      'clean': 'rm -rf .next node_modules/.cache',
      'build:analyze': 'ANALYZE=true next build',
    }
    
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2))
    console.log('‚úÖ package.json otimizado')
  }
}

// 3. Criar arquivo de otimiza√ß√£o do webpack
function createWebpackOptimizations() {
  console.log('‚öôÔ∏è  Criando otimiza√ß√µes do webpack...')
  
  const webpackConfig = `
// Otimiza√ß√µes espec√≠ficas do webpack para performance
module.exports = {
  // Configura√ß√µes de cache
  cache: {
    type: 'filesystem',
    allowCollectingMemory: true,
    buildDependencies: {
      config: [__filename],
    },
  },
  
  // Otimiza√ß√µes de resolu√ß√£o
  resolve: {
    symlinks: false,
    cacheWithContext: false,
  },
  
  // Configura√ß√µes de snapshot
  snapshot: {
    managedPaths: [],
    immutablePaths: [],
    buildDependencies: {
      hash: true,
      timestamp: true,
    },
    module: {
      timestamp: true,
    },
    resolve: {
      timestamp: true,
    },
    resolveBuildDependencies: {
      hash: true,
      timestamp: true,
    },
  },
  
  // Configura√ß√µes de watch
  watchOptions: {
    poll: false,
    aggregateTimeout: 200,
    ignored: ['**/node_modules/**', '**/.git/**', '**/.next/**'],
  },
}
`
  
  fs.writeFileSync('webpack.config.js', webpackConfig)
  console.log('‚úÖ Configura√ß√µes do webpack criadas')
}

// 4. Otimizar vari√°veis de ambiente
function optimizeEnvVars() {
  console.log('üîß Otimizando vari√°veis de ambiente...')
  
  const envPath = '.env.local'
  let envContent = ''
  
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8')
  }
  
  // Adicionar otimiza√ß√µes de performance
  const optimizations = `
# Otimiza√ß√µes de Performance
NEXT_TELEMETRY_DISABLED=1
FAST_REFRESH=true
NODE_OPTIONS="--max-old-space-size=8192 --max-semi-space-size=512"
NEXT_PRIVATE_STANDALONE=true
NEXT_PRIVATE_LOCAL_WEBPACK=true

# Configura√ß√µes de desenvolvimento
WEBPACK_CACHE=true
TURBOPACK=1
`
  
  // Verificar se as otimiza√ß√µes j√° existem
  if (!envContent.includes('NEXT_PRIVATE_STANDALONE')) {
    envContent += optimizations
    fs.writeFileSync(envPath, envContent)
    console.log('‚úÖ Vari√°veis de ambiente otimizadas')
  } else {
    console.log('‚úÖ Vari√°veis j√° otimizadas')
  }
}

// 5. Criar script de monitoramento
function createMonitoringScript() {
  console.log('üìä Criando script de monitoramento...')
  
  const monitorScript = `
// Script de monitoramento de performance
if (typeof window !== 'undefined') {
  // Monitorar tempos de carregamento
  window.addEventListener('load', () => {
    const loadTime = performance.now()
    console.log('‚è±Ô∏è  Tempo de carregamento:', Math.round(loadTime), 'ms')
    
    // Alertar se muito lento
    if (loadTime > 5000) {
      console.warn('‚ö†Ô∏è  Carregamento lento detectado!')
    }
  })
  
  // Monitorar navega√ß√£o
  const observer = new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      if (entry.entryType === 'navigation') {
        console.log('üîÑ Navega√ß√£o:', {
          tipo: entry.type,
          dura√ß√£o: Math.round(entry.duration),
          domContentLoaded: Math.round(entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart),
          loadComplete: Math.round(entry.loadEventEnd - entry.loadEventStart)
        })
      }
    }
  })
  
  observer.observe({ entryTypes: ['navigation'] })
}
`
  
  fs.writeFileSync('lib/performance-monitor.js', monitorScript)
  console.log('‚úÖ Script de monitoramento criado')
}

// 6. Reinicializar depend√™ncias se necess√°rio
function reinstallDependencies() {
  console.log('üì¶ Verificando depend√™ncias...')
  
  try {
    // Verificar se node_modules existe e est√° atualizado
    const packageLockExists = fs.existsSync('package-lock.json')
    const nodeModulesExists = fs.existsSync('node_modules')
    
    if (!nodeModulesExists || !packageLockExists) {
      console.log('üîÑ Reinstalando depend√™ncias...')
      execSync('npm install', { stdio: 'inherit' })
      console.log('‚úÖ Depend√™ncias reinstaladas')
    } else {
      console.log('‚úÖ Depend√™ncias OK')
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  Erro ao verificar depend√™ncias:', error.message)
  }
}

// 7. Criar guia de otimiza√ß√£o
function createOptimizationGuide() {
  console.log('üìñ Criando guia de otimiza√ß√£o...')
  
  const guide = `# Guia de Otimiza√ß√£o de Performance

## üöÄ Otimiza√ß√µes Aplicadas

### 1. Cache e Webpack
- ‚úÖ Cache do filesystem habilitado
- ‚úÖ Otimiza√ß√µes de resolu√ß√£o
- ‚úÖ Watch options otimizadas
- ‚úÖ Split chunks configurado

### 2. Vari√°veis de Ambiente
- ‚úÖ NODE_OPTIONS otimizado (8GB RAM)
- ‚úÖ TURBOPACK habilitado
- ‚úÖ WEBPACK_CACHE ativo
- ‚úÖ FAST_REFRESH habilitado

### 3. Scripts Dispon√≠veis
\`\`\`bash
# Desenvolvimento r√°pido com Turbo
npm run dev:fast

# Desenvolvimento com debug
npm run dev:debug

# Limpeza de cache
npm run clean

# Build com an√°lise
npm run build:analyze
\`\`\`

### 4. Monitoramento
- ‚úÖ Script de monitoramento criado
- ‚úÖ Alertas de performance
- ‚úÖ M√©tricas de navega√ß√£o

## üîß Comandos de Diagn√≥stico

### Verificar Performance
\`\`\`bash
# Executar otimiza√ß√£o
node otimizar-performance.js

# Iniciar com turbo
npm run dev:fast

# Monitorar no navegador
# Abra DevTools > Console para ver m√©tricas
\`\`\`

### Solu√ß√£o de Problemas

1. **Se ainda estiver lento:**
   - Execute: \`npm run clean\`
   - Reinicie: \`npm run dev:fast\`
   - Limpe cache do navegador

2. **Para an√°lise detalhada:**
   - Execute: \`npm run build:analyze\`
   - Verifique bundle size

3. **Monitoramento cont√≠nuo:**
   - Abra DevTools
   - V√° para Performance tab
   - Grave uma sess√£o

## üìä M√©tricas Esperadas

- **Tempo de inicializa√ß√£o:** < 5s
- **Compila√ß√£o inicial:** < 20s
- **Hot reload:** < 2s
- **Navega√ß√£o:** < 1s

## ‚ö†Ô∏è Troubleshooting

Se os problemas persistirem:
1. Reinicie o computador
2. Verifique RAM dispon√≠vel
3. Feche outros aplicativos
4. Execute \`node otimizar-performance.js\` novamente
`
  
  fs.writeFileSync('GUIA-OTIMIZACAO.md', guide)
  console.log('‚úÖ Guia de otimiza√ß√£o criado')
}

// Executar todas as otimiza√ß√µes
async function runOptimizations() {
  try {
    clearAllCaches()
    optimizePackageJson()
    createWebpackOptimizations()
    optimizeEnvVars()
    createMonitoringScript()
    reinstallDependencies()
    createOptimizationGuide()
    
    console.log('\nüéâ Otimiza√ß√£o conclu√≠da!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('1. Reinicie o servidor: npm run dev:fast')
    console.log('2. Monitore performance no console do navegador')
    console.log('3. Verifique se o carregamento melhorou')
    console.log('\n‚è±Ô∏è  Tempo esperado de carregamento: < 5 segundos')
    console.log('\nüí° Para an√°lise detalhada: npm run build:analyze')
    
  } catch (error) {
    console.error('‚ùå Erro durante otimiza√ß√£o:', error)
    process.exit(1)
  }
}

// Verificar se est√° no diret√≥rio correto
if (!fs.existsSync('package.json')) {
  console.log('‚ùå Execute este script na raiz do projeto (onde est√° o package.json)')
  process.exit(1)
}

runOptimizations().catch(console.error)