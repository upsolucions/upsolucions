#!/usr/bin/env node

/**
 * Script de Deploy Autom√°tico - Up Solucions
 * Automatiza o processo completo de deploy para Git e Vercel
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

function execCommand(command, description, options = {}) {
  console.log(`\nüîÑ ${description}...`)
  try {
    const result = execSync(command, { 
      encoding: 'utf8', 
      stdio: options.silent ? 'pipe' : 'inherit',
      ...options 
    })
    console.log(`‚úÖ ${description} conclu√≠do!`)
    return result
  } catch (error) {
    console.log(`‚ùå Erro em ${description}:`, error.message)
    if (options.exitOnError !== false) {
      process.exit(1)
    }
    return null
  }
}

function checkCommand(command, name) {
  try {
    execSync(command, { stdio: 'pipe' })
    return true
  } catch {
    console.log(`‚ùå ${name} n√£o encontrado!`)
    return false
  }
}

function checkGitStatus() {
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' })
    return status.trim() === ''
  } catch {
    return false
  }
}

function checkGitRemote() {
  try {
    const remote = execSync('git remote get-url origin', { encoding: 'utf8' })
    return remote.trim() !== ''
  } catch {
    return false
  }
}

async function setupGitRepository() {
  console.log('\nüìã Configura√ß√£o do Reposit√≥rio Git')
  console.log('==================================\n')
  
  if (!checkGitRemote()) {
    console.log('‚ö†Ô∏è  Reposit√≥rio Git n√£o configurado.')
    const setupGit = await question('Deseja configurar um novo reposit√≥rio? (s/n): ')
    
    if (setupGit.toLowerCase() === 's') {
      const repoName = await question('Nome do reposit√≥rio (padr√£o: upsolucions): ') || 'upsolucions'
      const username = await question('Seu username do GitHub: ')
      
      if (username) {
        const repoUrl = `https://github.com/${username}/${repoName}.git`
        
        execCommand('git init', 'Inicializando reposit√≥rio Git')
        execCommand('git add .', 'Adicionando arquivos')
        execCommand('git commit -m "feat: initial commit"', 'Fazendo commit inicial')
        execCommand(`git remote add origin ${repoUrl}`, 'Configurando remote')
        execCommand('git branch -M main', 'Configurando branch main')
        
        console.log(`\nüìù Agora crie o reposit√≥rio em: https://github.com/${username}/${repoName}`)
        console.log('   - Deixe p√∫blico ou privado conforme preferir')
        console.log('   - N√ÉO inicialize com README')
        
        const created = await question('\nReposit√≥rio criado no GitHub? (s/n): ')
        if (created.toLowerCase() === 's') {
          execCommand('git push -u origin main', 'Enviando para GitHub')
        } else {
          console.log('‚ö†Ô∏è  Crie o reposit√≥rio e execute: git push -u origin main')
          return false
        }
      }
    } else {
      return false
    }
  }
  
  return true
}

async function handleGitCommit() {
  console.log('\nüìã Verificando status do Git...')
  
  if (!checkGitStatus()) {
    console.log('‚ö†Ô∏è  Existem mudan√ßas n√£o commitadas.')
    
    // Mostrar status
    try {
      console.log('\nüìÑ Arquivos modificados:')
      execSync('git status --short', { stdio: 'inherit' })
    } catch {}
    
    const shouldCommit = await question('\nDeseja fazer commit das mudan√ßas? (s/n): ')
    
    if (shouldCommit.toLowerCase() === 's') {
      const commitMessage = await question('Mensagem do commit (ou Enter para usar padr√£o): ')
      const message = commitMessage || `feat: deploy autom√°tico - ${new Date().toLocaleString('pt-BR')}`
      
      execCommand('git add .', 'Adicionando arquivos ao Git')
      execCommand(`git commit -m "${message}"`, 'Fazendo commit')
      execCommand('git push origin main', 'Enviando para GitHub')
      return true
    } else {
      console.log('‚ùå Deploy cancelado. Fa√ßa commit das mudan√ßas primeiro.')
      return false
    }
  } else {
    console.log('‚úÖ Git est√° limpo!')
    return true
  }
}

async function setupVercel() {
  console.log('\nüîß Configura√ß√£o do Vercel')
  console.log('=========================\n')
  
  // Verificar Vercel CLI
  if (!checkCommand('vercel --version', 'Vercel CLI')) {
    console.log('\nüì¶ Instalando Vercel CLI...')
    const installResult = execCommand('npm install -g vercel', 'Instalando Vercel CLI', { exitOnError: false })
    if (!installResult) {
      console.log('‚ùå Falha na instala√ß√£o. Instale manualmente: npm install -g vercel')
      return false
    }
  } else {
    console.log('‚úÖ Vercel CLI encontrado!')
  }
  
  // Verificar login
  console.log('\nüîê Verificando login no Vercel...')
  try {
    const whoami = execSync('vercel whoami', { encoding: 'utf8', stdio: 'pipe' })
    console.log(`‚úÖ Logado como: ${whoami.trim()}`)
  } catch {
    console.log('‚ö†Ô∏è  N√£o logado no Vercel.')
    console.log('\nüîë Fazendo login no Vercel...')
    console.log('Isso abrir√° seu navegador para autentica√ß√£o.')
    
    try {
      execSync('vercel login', { stdio: 'inherit' })
      console.log('‚úÖ Login realizado com sucesso!')
    } catch {
      console.log('‚ùå Falha no login. Tente novamente manualmente: vercel login')
      return false
    }
  }
  
  return true
}

async function deployToVercel(isProd = false) {
  console.log('\nüöÄ Deploy no Vercel')
  console.log('==================\n')
  
  const deployCommand = isProd ? 'vercel --prod' : 'vercel'
  const deployType = isProd ? 'PRODU√á√ÉO' : 'PREVIEW'
  
  console.log(`üéØ Deploy para ${deployType}`)
  
  try {
    const result = execCommand(deployCommand, `Deploy ${deployType}`, { silent: false })
    
    console.log('\nüéâ Deploy conclu√≠do com sucesso!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('1. Acesse o link fornecido pelo Vercel')
    console.log('2. Teste o site em produ√ß√£o')
    console.log('3. Teste o modo admin (?admin=true)')
    
    return true
  } catch (error) {
    console.log('\n‚ùå Erro no deploy:')
    console.log(error.message)
    return false
  }
}

async function main() {
  console.log('üöÄ Deploy Autom√°tico - Up Solucions')
  console.log('===================================\n')
  
  // Verificar argumentos
  const args = process.argv.slice(2)
  const isProd = args.includes('--prod')
  const isPreview = args.includes('--preview')
  
  // Verificar depend√™ncias
  console.log('üîç Verificando depend√™ncias...')
  if (!checkCommand('git --version', 'Git')) {
    console.log('Instale o Git: https://git-scm.com/')
    process.exit(1)
  }
  if (!checkCommand('node --version', 'Node.js')) {
    console.log('Instale o Node.js: https://nodejs.org/')
    process.exit(1)
  }
  console.log('‚úÖ Depend√™ncias verificadas!')
  
  // Configurar Git se necess√°rio
  const gitReady = await setupGitRepository()
  if (!gitReady) {
    console.log('‚ùå Configura√ß√£o do Git cancelada.')
    rl.close()
    return
  }
  
  // Fazer commit se necess√°rio
  const commitReady = await handleGitCommit()
  if (!commitReady) {
    rl.close()
    return
  }
  
  // Configurar Vercel
  const vercelReady = await setupVercel()
  if (!vercelReady) {
    console.log('‚ùå Configura√ß√£o do Vercel falhou.')
    rl.close()
    return
  }
  
  // Determinar tipo de deploy
  let deployProd = isProd
  if (!isProd && !isPreview) {
    const deployType = await question('\nTipo de deploy (1=Produ√ß√£o, 2=Preview): ')
    deployProd = deployType === '1'
  }
  
  // Fazer deploy
  const deploySuccess = await deployToVercel(deployProd)
  
  if (deploySuccess) {
    console.log('\nüéâ Deploy autom√°tico conclu√≠do com sucesso!')
    console.log('\nüí° Comandos √∫teis para o futuro:')
    console.log('- npm run deploy          # Deploy interativo')
    console.log('- npm run deploy:prod     # Deploy direto para produ√ß√£o')
    console.log('- npm run deploy:preview  # Deploy para preview')
    console.log('- npm run full-deploy     # Git push + Vercel deploy')
  } else {
    console.log('\n‚ùå Deploy falhou. Verifique os erros acima.')
  }
  
  rl.close()
}

// Executar script
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { main, deployToVercel, setupGitRepository, setupVercel }