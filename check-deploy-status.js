#!/usr/bin/env node

/**
 * Script para verificar o status do deploy na Vercel
 * Executa automaticamente ap√≥s push para verificar se o deploy foi bem-sucedido
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class DeployChecker {
  constructor() {
    this.projectConfig = this.loadProjectConfig();
  }

  loadProjectConfig() {
    try {
      const vercelConfigPath = path.join(__dirname, '.vercel', 'project.json');
      if (fs.existsSync(vercelConfigPath)) {
        return JSON.parse(fs.readFileSync(vercelConfigPath, 'utf8'));
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel carregar configura√ß√£o do projeto Vercel');
    }
    return null;
  }

  async checkVercelStatus() {
    try {
      console.log('üîç Verificando status do deploy na Vercel...');
      
      // Verificar deployments recentes
      const deployments = execSync('vercel ls', { encoding: 'utf8' });
      console.log('üìã Deployments recentes:');
      // Mostrar apenas as primeiras 10 linhas
      const lines = deployments.split('\n').slice(0, 10);
      console.log(lines.join('\n'));
      
      // Extrair URL de produ√ß√£o mais recente
      const deploymentLines = deployments.split('\n');
      const productionLine = deploymentLines.find(line => 
        line.includes('‚óè Ready') && line.includes('Production')
      );
      
      if (productionLine) {
        const urlMatch = productionLine.match(/https:\/\/[^\s]+/);
        if (urlMatch) {
          const productionUrl = urlMatch[0];
          console.log('‚úÖ URL de Produ√ß√£o:', productionUrl);
          return productionUrl;
        }
      }
      
      console.log('‚ö†Ô∏è  Nenhum deploy de produ√ß√£o encontrado');
      return null;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar status da Vercel:', error.message);
      return null;
    }
  }

  async checkGitStatus() {
    try {
      console.log('üîç Verificando status do Git...');
      
      // Verificar se h√° mudan√ßas n√£o commitadas
      const status = execSync('git status --porcelain', { encoding: 'utf8' });
      if (status.trim()) {
        console.log('‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas:');
        console.log(status);
        return false;
      }
      
      // Verificar √∫ltimo commit
      const lastCommit = execSync('git log -1 --oneline', { encoding: 'utf8' });
      console.log('üìù √öltimo commit:', lastCommit.trim());
      
      // Verificar se est√° sincronizado com origin
      try {
        const behind = execSync('git rev-list HEAD..origin/main --count', { encoding: 'utf8' });
        const ahead = execSync('git rev-list origin/main..HEAD --count', { encoding: 'utf8' });
        
        if (parseInt(behind.trim()) > 0) {
          console.log(`‚ö†Ô∏è  Branch est√° ${behind.trim()} commits atr√°s do origin/main`);
        }
        
        if (parseInt(ahead.trim()) > 0) {
          console.log(`‚úÖ Branch est√° ${ahead.trim()} commits √† frente do origin/main`);
        }
        
        if (parseInt(behind.trim()) === 0 && parseInt(ahead.trim()) === 0) {
          console.log('‚úÖ Branch sincronizada com origin/main');
        }
        
      } catch (error) {
        console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar sincroniza√ß√£o com origin');
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar status do Git:', error.message);
      return false;
    }
  }

  async generateDeployReport() {
    console.log('\nüöÄ === RELAT√ìRIO DE DEPLOY === üöÄ\n');
    
    const gitOk = await this.checkGitStatus();
    console.log('');
    
    const productionUrl = await this.checkVercelStatus();
    console.log('');
    
    // Resumo final
    console.log('üìä === RESUMO === üìä');
    console.log(`Git Status: ${gitOk ? '‚úÖ OK' : '‚ö†Ô∏è  Aten√ß√£o'}`);
    console.log(`Deploy Status: ${productionUrl ? '‚úÖ Ativo' : '‚ùå Problema'}`);
    
    if (productionUrl) {
      console.log(`üåê URL de Produ√ß√£o: ${productionUrl}`);
      console.log('\nüéâ Deploy realizado com sucesso!');
      console.log('‚úÖ Site est√° online e funcionando');
      
      // Salvar URL em arquivo para refer√™ncia
      fs.writeFileSync(
        path.join(__dirname, 'PRODUCTION_URL.txt'),
        `${productionUrl}\n√öltima atualiza√ß√£o: ${new Date().toISOString()}\n`
      );
      
    } else {
      console.log('\n‚ùå Problemas detectados no deploy');
      console.log('üîç Verifique os logs acima para mais detalhes');
    }
    
    return { gitOk, productionUrl };
  }
}

// Executar verifica√ß√£o
if (require.main === module) {
  const checker = new DeployChecker();
  checker.generateDeployReport()
    .then(result => {
      process.exit(result.productionUrl ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Erro fatal:', error);
      process.exit(1);
    });
}

module.exports = DeployChecker;